class Solution {
  public:
    vector<int> dfs(vector<vector<int>>& adj) {
       
        int V = adj.size();   // Number of vertices
        vector<bool> visited(V, false);        // Track visited nodes
        vector<int> dfsResult;                 // Store DFS traversal result
        dfsHelper(adj, visited, 0, dfsResult); // Start DFS from node 0

        return dfsResult;
    }
    
    private:
    void dfsHelper(vector<vector<int>> &adj, vector<bool> &visited, int node, vector<int> &dfsResult) {
        visited[node] = true;     // Mark the current node as visited
        dfsResult.push_back(node);             // Add it to the result

        for (int i = 0; i < adj[node].size(); i++) {
            
            int neighbor = adj[node][i]; // Get each neighbor
            if (!visited[neighbor]) {          // Visit unvisited neighbors
                dfsHelper(adj, visited, neighbor, dfsResult);
            }
        }
    }
};
